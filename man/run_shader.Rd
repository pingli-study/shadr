% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/openwindow.R
\name{run_shader}
\alias{run_shader}
\title{Run Shader

Opens a window and runs a GLSL shader. This version includes two uniforms: 
`u_resolution` (shadertoy: `iResolution`) and `u_time` (shadertoy: `iTime`). You can get the 
screenspace coordinate with `gl_FragCoord`. 

Check out shadertoy.com for advanced examples, and thebookofshaders.com for a nice intro tutorial.
(no affiliation with either).}
\usage{
run_shader(
  fragment,
  vertex = NULL,
  width = 640,
  height = 360,
  type = "glfw",
  replace = TRUE,
  verbose = interactive()
)
}
\arguments{
\item{fragment}{Fragment shader.}

\item{vertex}{Default `NULL`. THe vertex shader.}

\item{width}{Default `640`. Width of the window.}

\item{height}{Default `320`. Width of the window.}

\item{type}{Default `glfw`. Can also be `shadertoy`.}

\item{replace}{Default `TRUE`. If `type = "shadertoy"`, this will parse and replace `mainImage(...)`
with `main()`, `fragCoord` with `gl_FragCoord`, and `fragColor` with `color`. Note that `color` here
is a `vec3`, while it's a `vec4` on `shadertoy` (you will have to account for this yourself).}

\item{verbose}{Default `interactive()`. If `TRUE`, will output status messages.}
}
\description{
Run Shader

Opens a window and runs a GLSL shader. This version includes two uniforms: 
`u_resolution` (shadertoy: `iResolution`) and `u_time` (shadertoy: `iTime`). You can get the 
screenspace coordinate with `gl_FragCoord`. 

Check out shadertoy.com for advanced examples, and thebookofshaders.com for a nice intro tutorial.
(no affiliation with either).
}
\examples{
#The default vertex shader is:

vertexshader = "#version 330 core
layout(location = 0) in vec3 vertexPosition_modelspace;
void main(){
 gl_Position =  vec4(vertexPosition_modelspace,1);
}"

#Here we simply display a color palette across the screen:
fragmentshader = "#version 330 core
uniform vec2 u_resolution;  // Canvas size (width,height)
uniform float u_time;       // Time in seconds since load

out vec3 color;

void main() {
 vec2 st = gl_FragCoord.xy/(u_resolution);
 color = vec3(st.x,st.y,0.0);
}"
\donttest{
run_shader(fragmentshader, width=800, height=800)
}

#Animating a signed distance field with time
fragmentshader = "#version 330 core
uniform vec2 u_resolution;
uniform float u_time;
out vec3 color;

void main(){
 vec2 st = gl_FragCoord.xy/u_resolution.xy;
 st.x *= u_resolution.x/u_resolution.y;
 float d = 0.0;
 
 // Remap the space to -1. to 1.
 st = st *2.0-1.0;
 
 // Make the distance field
 d = length( abs(st)-.3 );
 
 // Visualize the distance field
 color = vec3(smoothstep(fract(d*abs(sin(u_time))*10.0),0.2,0.8));
}"
\donttest{
run_shader(fragmentshader, width=800, height=800)
}

#Animating between colors:
fragmentshader = "#version 330 core
uniform vec2 u_resolution;
uniform float u_time;
out vec3 color;

vec3 colorA = vec3(0.0,0.0,1.0);
vec3 colorB = vec3(1.0,0.0,0.0);

void main() {
 vec3 color2 = vec3(0.0);
 float pct = abs(sin(u_time*4));
 color = mix(colorA, colorB, pct);
}"
\donttest{
run_shader(fragmentshader, width=800, height=800)
}

#A moving, bouncing ball
fragmentshader = "#version 330 core
uniform vec2 u_resolution;
uniform float u_time;
out vec3 color;

vec3 colorA = vec3(0.1,0.1,0.9);
vec3 colorB = vec3(1.0,0.8,0.2);

void main(){
 vec2 st = gl_FragCoord.xy/u_resolution.xy;
 st.x += cos(u_time*10)/10;
 st.y += sin(u_time*10)/10;
 float pct = 1.0;
 vec2 toCenter = vec2(0.5)-st;
 pct = smoothstep(length(toCenter)-0.2,0.1 * abs(sin(u_time*4.0)),0.8);
 color = mix(colorA,colorB,pct);
}"
\donttest{
run_shader(fragmentshader, width=800, height=800)
}
}
