% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/openwindow.R
\name{generate_shader_video}
\alias{generate_shader_video}
\title{Generate Shader Video}
\usage{
generate_shader_video(
  fragment,
  filename = "output.mp4",
  vertex = NULL,
  width = 640,
  height = 360,
  type = "glfw",
  replace = TRUE,
  verbose = interactive(),
  timestep = pi/180,
  frames = 360,
  framerate = 30
)
}
\arguments{
\item{fragment}{Fragment shader.}

\item{filename}{Default `output`. Filename. If no file extension, `.mp4` will be added.
If file extension is `.gif``, a gif will be produced instead.}

\item{vertex}{Default `NULL`. THe vertex shader.}

\item{width}{Default `640`. Width of the window.}

\item{height}{Default `320`. Width of the window.}

\item{type}{Default `glfw`. Can also be `shadertoy`.}

\item{replace}{Default `TRUE`. If `type = "shadertoy"`, this will parse and replace `mainImage(...)`
with `main()`, `fragCoord` with `gl_FragCoord`, and `fragColor` with `color`. Note that `color` here
is a `vec3`, while it's a `vec4` on `shadertoy` (you will have to account for this yourself).}

\item{verbose}{Default `interactive()`. If `TRUE`, will output status messages.}

\item{timestep}{Default `pi/180`. The timestep in the video.}

\item{frames}{Default `360`. Number of frames to generate in the video.}

\item{framerate}{Default `30`. Frames per second.}
}
\description{
Generate Shader Video
}
\examples{
#We'll create a shader and generate a video:
fragmentshader = "#version 330 core
uniform vec2 u_resolution;
uniform float u_time;
out vec3 color;

#define PI 3.14159265359

mat2 rotate2d(float _angle){
 return mat2(cos(_angle),-sin(_angle),
             sin(_angle),cos(_angle));
}

void main(){
 vec2 st = gl_FragCoord.xy/u_resolution.xy;
 st.x *= u_resolution.x/u_resolution.y;
 float d = 0.0;
 
 // Remap the space to -1. to 1.
 st = st *2.0-1.0;
 st = rotate2d( sin(u_time)*PI ) * st;
 
 // Make the distance field
 d = length( abs(st)-.5 );
 
 // Visualize the distance field
 color = vec3(smoothstep(fract(d*abs(sin(u_time)*10)),0.2,0.8));
}"
\donttest{
generate_shader_video(fragmentshader, filename="sdf.mp4", width=500, height=500)
generate_shader_video(fragmentshader, filename="sdf.gif", timestep = pi/180*6,
                     width=500, height=500, frames=60, framerate = 15)
}
}
